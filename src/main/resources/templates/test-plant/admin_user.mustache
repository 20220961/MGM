<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin User Management</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 10px;
            text-align: left;
        }
        .status-message {
            margin-top: 5px;
            font-size: 12px;
        }
        .available {
            color: green;
        }
        .unavailable {
            color: red;
        }
    </style>
</head>
<body>
<h1>Admin User Management</h1>

<table id="userTable">
    <thead>
    <tr>
        <th>ID</th>
        <th>Login ID</th>
        <th>Password</th>
        <th>Nickname</th>
        <th>Name</th>
        <th>Phone Number</th>
        <th>Email</th>
        <th>Role</th>
        <th>Active</th>
        <th>Actions</th>
        <th>식물할당</th>
    </tr>
    </thead>
    <tbody>
    <!-- 사용자 데이터가 여기에 동적으로 추가됩니다 -->
    </tbody>
</table>

<script>
    let originalLoginId = {}; // 사용자의 초기 loginId를 저장
    let originalNickname = {}; // 사용자의 초기 nickname을 저장
    let loginIdChecked = {}; // 로그인 ID 중복 체크 여부 저장
    let nicknameChecked = {}; // 닉네임 중복 체크 여부 저장

    document.addEventListener("DOMContentLoaded", function() {
        // 사용자 리스트 Fetch API 호출
        fetch('/api/admin/getuserlist')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch user data');
                }
                return response.json();
            })
            .then(data => {
                const userTable = document.querySelector('#userTable tbody');
                userTable.innerHTML = '';  // 기존 내용을 지움

                data.forEach(user => {
                    originalLoginId[user.id] = user.loginId; // 초기 loginId 저장
                    originalNickname[user.id] = user.nickname; // 초기 nickname 저장
                    loginIdChecked[user.id] = false; // 로그인 ID 초기 상태
                    nicknameChecked[user.id] = false; // 닉네임 초기 상태

                    const row = document.createElement('tr');

                    row.innerHTML = `
                        <td>${user.id}</td>
                        <td>
                            <input type="text" id="loginId-${user.id}" value="${user.loginId}">
                            <button type="button" onclick="checkDuplicateLoginId(${user.id})">Check</button>
                            <div id="loginIdStatus-${user.id}" class="status-message"></div>
                        </td>
                        <td><input type="text" id="password-${user.id}" value="${user.password}"></td> <!-- Password를 텍스트로 표시 -->
                        <td>
                            <input type="text" id="nickname-${user.id}" value="${user.nickname}">
                            <button type="button" onclick="checkDuplicateNickname(${user.id})">Check</button>
                            <div id="nicknameStatus-${user.id}" class="status-message"></div>
                        </td>
                        <td><input type="text" id="name-${user.id}" value="${user.name}"></td>
                        <td><input type="text" id="phonenumber-${user.id}" value="${user.phonenumber}"></td>
                        <td><input type="text" id="email-${user.id}" value="${user.email}"></td>
                        <td>
                            <select name="role" id="role-${user.id}">
                                <option value="0" ${user.role === 'USER' ? 'selected' : ''}>User</option>
                                <option value="1" ${user.role === 'ADMIN' ? 'selected' : ''}>Admin</option>
                            </select>
                        </td>
                        <td>${user.active ? 'Active' : 'Inactive'}</td>
                        <td>
                            <button type="button" onclick="updateUser(${user.id})" id="updateButton-${user.id}" disabled>Update</button>
                        </td>
                        <td>식물할당</td>
                    `;

                    userTable.appendChild(row);
                });
            })
            .catch(error => console.error('Error:', error));
    });

    function checkDuplicateLoginId(userId) {
        const loginId = document.getElementById(`loginId-${userId}`).value; // userId를 사용하도록 수정
        const statusElement = document.getElementById(`loginIdStatus-${userId}`);

        // 만약 로그인 ID가 원래 값과 동일하다면 통과 처리
        if (loginId === originalLoginId[userId]) {
            statusElement.textContent = "사용가능한 ID입니다.";
            statusElement.classList.remove("unavailable");
            statusElement.classList.add("available");
            loginIdChecked[userId] = true;
            document.getElementById(`loginId-${userId}`).disabled = true; // 수정 불가 처리
            enableUpdateButton(userId); // update 버튼 활성화 여부 확인
            return;
        }

        fetch(`/api/usermanage/check-duplicate?loginId=${encodeURIComponent(loginId)}`)
            .then(response => response.json())
            .then(data => {
                if (data.isDuplicate) {
                    statusElement.textContent = "이미 사용중인 ID입니다.";
                    statusElement.classList.remove("available");
                    statusElement.classList.add("unavailable");
                    loginIdChecked[userId] = false;
                } else {
                    statusElement.textContent = "사용가능한 ID입니다.";
                    statusElement.classList.remove("unavailable");
                    statusElement.classList.add("available");
                    loginIdChecked[userId] = true;
                    document.getElementById(`loginId-${userId}`).disabled = true; // 수정 불가 처리
                }
                enableUpdateButton(userId); // update 버튼 활성화 여부 확인
            })
            .catch(error => console.error('Error:', error));
    }

    function checkDuplicateNickname(userId) {
        const nickname = document.getElementById(`nickname-${userId}`).value;
        const statusElement = document.getElementById(`nicknameStatus-${userId}`);

        // 만약 닉네임이 원래 값과 동일하다면 통과 처리
        if (nickname === originalNickname[userId]) {
            statusElement.textContent = "사용가능한 닉네임입니다.";
            statusElement.classList.remove("unavailable");
            statusElement.classList.add("available");
            nicknameChecked[userId] = true;
            document.getElementById(`nickname-${userId}`).disabled = true; // 수정 불가 처리
            enableUpdateButton(userId); // update 버튼 활성화 여부 확인
            return;
        }

        fetch(`/api/usermanage/check-nickname-duplicate?nickname=${encodeURIComponent(nickname)}`)
            .then(response => response.json())
            .then(data => {
                if (data.isDuplicate) {
                    statusElement.textContent = "이미 사용중인 닉네임입니다.";
                    statusElement.classList.remove("available");
                    statusElement.classList.add("unavailable");
                    nicknameChecked[userId] = false;
                } else {
                    statusElement.textContent = "사용가능한 닉네임입니다.";
                    statusElement.classList.remove("unavailable");
                    statusElement.classList.add("available");
                    nicknameChecked[userId] = true;
                    document.getElementById(`nickname-${userId}`).disabled = true; // 수정 불가 처리
                }
                enableUpdateButton(userId); // update 버튼 활성화 여부 확인
            })
            .catch(error => console.error('Error:', error));
    }

    function enableUpdateButton(userId) {
        // loginIdChecked와 nicknameChecked가 모두 true인 경우에만 update 버튼 활성화
        const updateButton = document.getElementById(`updateButton-${userId}`);
        if (loginIdChecked[userId] && nicknameChecked[userId]) {
            updateButton.disabled = false;
        } else {
            updateButton.disabled = true;
        }
    }

    function updateUser(userId) {
        const userForm = {
            id: userId,
            loginId: document.getElementById(`loginId-${userId}`).value,
            password: document.getElementById(`password-${userId}`).value,
            nickname: document.getElementById(`nickname-${userId}`).value,
            name: document.getElementById(`name-${userId}`).value,
            phonenumber: document.getElementById(`phonenumber-${userId}`).value,
            email: document.getElementById(`email-${userId}`).value,
            role: document.getElementById(`role-${userId}`).value, // role을 숫자로 전달 (0: USER, 1: ADMIN)
            active: document.getElementById(`active-${userId}`) ? 1 : 0
        };

        fetch('/api/admin/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userForm)
        })
        .then(response => {
            if (response.ok) {
                alert('User updated successfully');
            } else {
                alert('Failed to update user');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script>
</body>
</html>

{{> layouts/header}}

<h1 id="postTitle"></h1>
<p id="postAuthor"></p>
<p id="postContent"></p>
<div id="postImages"></div>
<p id="postLikeCount"></p>
<button id="likePost">좋아요</button>
<p id="postCount"></p>
<p id="postRegdate"></p>

<button id="editPost">수정</button>
<button id="deletePost">삭제</button> <!-- 삭제 버튼 추가 -->

<form id="editPostForm" style="display:none;">
    <input type="text" id="editPostTitle" required>
    <textarea id="editPostContent" required></textarea>
    <input type="file" id="editPostImages" multiple>
    <button type="submit">수정 완료</button>
</form>

<h3>댓글 작성</h3>
<form id="commentForm">
    <textarea id="commentContent" name="content" required></textarea>
    <br>
    <button type="submit">작성</button>
</form>

<h3>댓글 목록</h3>
<ul id="commentList"></ul>

{{> layouts/footer}}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var postId = {{post.id}}; // postId는 서버 사이드에서 렌더링하여 전달

        // 게시글 상세 정보를 불러오기
        fetch('/api/posts/' + postId)
            .then(response => {
                if (response.status === 302) {  // 리다이렉트 응답 처리
                    alert('이 게시글은 삭제되었습니다.');
                    window.location.href = '/';  // 메인 페이지로 리다이렉트
                } else if (!response.ok) {
                    throw new Error('게시글을 불러오는데 실패했습니다.');
                }
                return response.json();
            })
            .then(post => {
                // 게시글 정보 설정
                document.getElementById('postTitle').textContent = post.title;
                document.getElementById('postAuthor').innerHTML = '작성자: <a href="/user/' + post.user.id + '/guestbook">' + post.user.nickname + '</a>';
                document.getElementById('postContent').textContent = post.content;
                document.getElementById('postLikeCount').textContent = '좋아요 갯수: ' + post.likeCount;
                document.getElementById('postCount').textContent = '조회수: ' + post.count;
                document.getElementById('postRegdate').textContent = '작성시간: ' + post.regdate;

                // 게시글 이미지 설정
                var postImages = document.getElementById('postImages');
                post.pictureBase64List.forEach(image => {
                    var img = document.createElement('img');
                    img.src = 'data:image/jpeg;base64,' + image;
                    img.alt = 'Post Image';
                    postImages.appendChild(img);
                });

                // 게시글 수정 폼에 기존 값 설정
                document.getElementById('editPostTitle').value = post.title;
                document.getElementById('editPostContent').value = post.content;
            })
            .catch(error => {
                console.error('Error:', error);
            });

        // 게시글 수정 버튼 클릭 이벤트
        document.getElementById('editPost').addEventListener('click', function() {
            document.getElementById('editPostForm').style.display = 'block';
        });

        // 게시글 수정 폼 제출 이벤트
        document.getElementById('editPostForm').addEventListener('submit', function(event) {
            event.preventDefault();

            var formData = new FormData();
            formData.append('title', document.getElementById('editPostTitle').value);
            formData.append('content', document.getElementById('editPostContent').value);
            var images = document.getElementById('editPostImages').files;
            for (var i = 0; i < images.length; i++) {
                formData.append('pictures', images[i]);
            }

            fetch('/api/posts/' + postId + '/update', {
                method: 'PUT',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                alert(result);
                window.location.reload(); // 수정 후 페이지 새로고침
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

        // 게시글 삭제 버튼 클릭 이벤트
        document.getElementById('deletePost').addEventListener('click', function() {
            if (confirm('이 게시글을 삭제하시겠습니까?')) {
                fetch('/api/posts/' + postId + '/delete', {
                    method: 'PUT'
                })
                .then(response => response.text())
                .then(result => {
                    alert(result);
                    window.location.href = '/'; // 삭제 후 메인 페이지로 리다이렉트
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });

        // 댓글 목록을 불러오기
        fetch('/api/comments/post/' + postId)
            .then(response => response.json())
            .then(comments => {
                const commentList = document.getElementById('commentList');
                commentList.innerHTML = ''; // 댓글 목록 초기화

                // 부모 댓글만 필터링하여 최상위에 렌더링
                const parentComments = comments.filter(comment => !comment.parentCommentId);
                parentComments.forEach(comment => {
                    renderComment(comment, commentList, comments);
                });
            });

        // 댓글과 대댓글 렌더링 함수
        function renderComment(comment, parentElement, allComments) {
            const listItem = document.createElement('li');
            listItem.innerHTML = `
                <p>작성자: <a href="/user/${comment.user.id}/guestbook">${comment.user.nickname}</a></p>
                <p>${comment.content}</p>
                <p id="commentLikeCount${comment.id}">추천: ${comment.likeCount}</p>
                <button class="likeComment" data-comment-id="${comment.id}">추천</button>
                <button class="deleteComment" data-comment-id="${comment.id}">삭제</button> <!-- 삭제 버튼 추가 -->
                <p>작성 시간: ${comment.regdate}</p>
                ${comment.canEdit ? `
                <!-- 댓글 수정 -->
                <button class="editComment" data-comment-id="${comment.id}">수정</button>
                <form class="editCommentForm" data-comment-id="${comment.id}" style="display: none;">
                    <textarea name="content" required>${comment.content}</textarea>
                    <br>
                    <button type="submit">수정 완료</button>
                </form>
                ` : ''}
                <!-- 대댓글 작성 form -->
                <h4>대댓글 달기</h4>
                <form class="recommentForm" data-comment-id="${comment.id}">
                    <textarea name="content" required></textarea>
                    <br>
                    <button type="submit">작성</button>
                </form>
                <!-- 대댓글 목록 -->
                <ul id="recommentList${comment.id}"></ul>
            `;
            parentElement.appendChild(listItem);

            // 자식 댓글(대댓글)을 렌더링
            const recommentList = document.getElementById('recommentList' + comment.id);
            recommentList.innerHTML = '';
            const childComments = allComments.filter(c => c.parentCommentId === comment.id);
            childComments.forEach(recomment => {
                renderComment(recomment, recommentList, allComments);
            });
        }

        // 게시글 좋아요 버튼 클릭 이벤트
        document.getElementById('likePost').addEventListener('click', function() {
            fetch('/api/posts/' + postId + '/like', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('postLikeCount').textContent = '좋아요 갯수: ' + data;
            });
        });

        // 댓글 작성 폼 제출 이벤트
        document.getElementById('commentForm').addEventListener('submit', function(event) {
            event.preventDefault();
            var formData = new FormData(this);
            formData.append('cmPostId', postId);

            fetch('/api/comments/create', {  // 댓글 작성 경로 수정
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                alert(result);
                window.location.reload(); // 댓글 작성 후 페이지 새로고침
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

        // 댓글과 대댓글 수정 및 좋아요, 삭제 이벤트 처리
        document.body.addEventListener('click', function(event) {
            if (event.target.classList.contains('likeComment')) {
                var commentId = event.target.getAttribute('data-comment-id');
                fetch('/api/comments/' + commentId + '/like', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('commentLikeCount' + commentId).textContent = '추천: ' + data;
                });
            }

            if (event.target.classList.contains('editComment')) {
                var commentId = event.target.getAttribute('data-comment-id');
                var form = document.querySelector(`form.editCommentForm[data-comment-id="${commentId}"]`);
                form.style.display = 'block';
            }

            if (event.target.classList.contains('deleteComment')) {
                var commentId = event.target.getAttribute('data-comment-id');
                if (confirm('이 댓글을 삭제하시겠습니까?')) {
                    fetch('/api/comments/' + commentId + '/delete', {
                        method: 'PUT'
                    })
                    .then(response => response.text())
                    .then(result => {
                        alert(result);
                        window.location.reload(); // 삭제 후 페이지 새로고침
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                }
            }
        });

        document.body.addEventListener('submit', function(event) {
            if (event.target.classList.contains('editCommentForm')) {
                event.preventDefault();
                var form = event.target;
                var commentId = form.getAttribute('data-comment-id');
                var formData = new FormData(form);

                fetch('/api/comments/' + commentId + '/update', {  // 댓글 수정
                    method: 'PUT',
                    body: formData
                })
                .then(response => response.text())
                .then(result => {
                    alert(result);
                    window.location.reload(); // 댓글 수정 후 페이지 새로고침
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }

            if (event.target.classList.contains('recommentForm')) {
                event.preventDefault();
                var form = event.target;
                var commentId = form.getAttribute('data-comment-id');
                var formData = new FormData(form);

                formData.append('cmPostId', postId); // 대댓글 작성 시 cmPostId를 추가
                formData.append('cmCommentId', commentId); // 대댓글 작성 시 cmCommentId를 추가

                fetch('/api/comments/' + commentId + '/create', {  // 대댓글 작성 경로 수정
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(result => {
                    alert(result);
                    window.location.reload(); // 대댓글 작성 후 페이지 새로고침
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });
    });
</script>
